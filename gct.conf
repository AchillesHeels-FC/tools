[Graph]
# Graph 无向图
# MultiGraph 多边图
1 = Graph
2 = MultiGraph

[sample_path]
# 正负样本路径
sample_path = /Users/apple/opt/py3_code/tools/data/gct_data.csv

[sep_string]
# 样本特征分隔符
sep = ,

[node]
# 以某种维度作为节点
node_dimension = node
# 绘图时是否展示属性
node_attribute_flag = False
# 绘图时节点展示的属性索引
node_attr_show = telno,label

[edge]
# 建立关联关系的条件
relation = userid,ip,telno
# 绘图时是否展示属性
edge_attribute_flag = False
# 绘图时边展示的属性索引('weight': 权重, 'relation': 关联关系, 's_l': 起始点标签, 'e_l': 结束点标签)
edge_attr_show = weight

[weight]
# 边权重计算方式 default: 读取文件默认值  jaccard: 雅卡尔相似系数(可含已知样本标签权重)
weight_cal_func = jaccard
# 文件中已知节点的权重索引
weight_col = weight
# 若根据节点权重计算边权重时，可选择：最大最小化(max/min)
weight_setting = max
# 边权重阈值，低于阈值删除边
edge_weight_threshold = 0.2

[label]
label_col = label

[layout]
# circular_layout  生成圆形节点布局
# random_layout 生成随机节点布局
# shell_layout 生成同心圆节点布局
# spring_layout 利用 Fruchterman-Reingold force-directed算法生成节点布局
# spectral_layout 利用图拉普拉斯特征向量生成节点布局
# kamada_kawai_layout 使用 Kamada-Kawai路径长度代价函数生成布局
pos = shell_layout

[Community]
# 社区分类算法选择 girvan_newman: GN算法 best_partition: louvain算法
community = louvain
community_pos = spring_layout